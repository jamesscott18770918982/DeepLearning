#导入相关的python第三方包
import numpy as np
import sklearn.preprocessing as prep
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

#实现的是标准的均匀分布的Xaiver初始化器
def xavier_init(fan_in,fan_out,constant = 1):
    low = -constant * np.sqrt(6.0/(fan_in+fan_out))
    
    high = constant * np.sqrt(6.0/(fan_in+fan_out))
    
    return tf.random_uniform((fan_in,fan_out),minval = low,maxval = high,dtype = tf.float32)
    
    
class AdditiveGaussianNoiseAutoencoder(object):
    #参数说明
    #n_input:输入变量数
    #n_hidden:隐藏层节点数
    #tfansfer_function:隐藏层激活函数，默认为softplus
    #optimizer（优化器：默认为Adam）
    #scale：高斯噪声系数，默认为0.1
    
    def __init__(self,n_input,n_hidden,transfer_function=tf.nn.softplus,optimizer = tf.train.AdamOptimizer(),scale = 0.1 ):
        self.n_input = n_input
        self.n_hidden = n_hidden
        self.transfer = transfer_function
        self.scale = tf.placeholder(tf.float32)
        self.training_scale = scale
        network_weights = self._initialize_weights()
        self.weights = network_weights
        
        #接下来我们开始定义网络结构，我们为输入x创建一个维度为n_input的placeholder，然后建立一个能提取特征的隐含层，我们先将输入x加上噪声，然后将
        #加了噪声的输入与隐含层的权重w1进行相乘，最后加上偏置b1，最后对相加的结果进行激活函数处理
        #经过隐含层后，我们㤇在输出层进行数据复原，重建操作（即建立reconstruction层），这里我们就不要激活函数了，直接将隐含层的输出乘上输出层的·
        #权重w2，再加上输出层的偏置b2
        self.x = tf.placeholder(tf.float32,[None,self.n_input])
        self.hidden = self.transfer(tf.add(tf.matmul(self.x + scale * tf.random_normal((n_input,)),self.weights['w1']),self.weights['b1']))
        
        self.reconstruction = tf.add(tf.matmul(self.hidden,self.weights['w2']),self.weights['b2'])
        
        #自编码器的损失函数
        self.cost = 0.5 * tf.reduce_sum(tf.pow(tf.subtract(
                                self.reconstruction,self.x),2.0))
        self.optimizer = optimizer.minimize(self.cost)
        
        init = tf.global_variables_initializer()
        self.sess = tf.Session()
        self.sess.run(init)
        
    #参数初始化函数_initialize_weights
    def _initialize_weights(self):
        all_weights = dict()
        all_weights['w1']=tf.Variable(xavier_init(self.n_input,self.n_hidden))
        
        all_weights['b1']=tf.Variable(tf.zeros([self.n_hidden],dtype=tf.float32))
        
        all_weights['w2']=tf.Variable(tf.zeros([self.n_hidden,self.n_input],dtype=tf.float32))
        
        all_weights['b2']=tf.Variable(tf.zeros([self.n_input],dtype=tf.float32))
        
        return all_weights
    
    def partial_fit(self,X):
        cost,opt = self.sess.run((self.cost,self.optimizer),
                                feed_dict = {self.x:X,self.scale:self.training_scale})
        return cost
    
    def calc_total_cost(self,X):
        return self.sess.run(self.cost,feed_dict = {self.x:X,
                                self.scale:self.training_scale
                                                   })
    
    #该函数返回自编码器隐含层的输出结果，自编码器的隐含层的最主要功能就是学习出数据中的高阶特征
    def transform(self,X):
        return self.sess.run(self.hidden,feed_dict = {self.x:X,
                            self.scale:self.training_scale
                                                     })
    
    #将高阶特征复原为原始数据的步骤
    def generate(self,hidden=None):
        if hidden is None:
            hidden = np.random.noraml(size = self.weights['b1'])
        return self.sess.run(self.reconstruction,
                            feed_dict = {self.hidden:hidden})
    
    #整体运行一遍复原过程，包括提取高阶特征和通过高阶特征复原数据，输入数据是原数据，输出数据是复原后的数据
    def reconstruct(self,X):
        return self.sess.run(self.reconstruction,feed_dict ={ self.x:X,
                            self.scale:self.training_scale})
    
    #获取隐含层的权重w1
    def getWeights(self):
        return self.sess.run(self.weights['w1'])
    
    #获取隐含层的偏置稀疏b1
    def getBiases(self):
        return self.sess.run(self.weights['b1'])
    
    
   #导入手写数字数据集
   mnist=input_data.read_data_sets('./MNIST_data/',one_hot=True)
   
   #定义一个堆训练，册数数据进行标准化处理的函数.标准化即让数据变成均值为0，且标准差为1的分布。方法就是先减去均值，再除以标准差
def standard_scale(X_train,X_test):
    preprocessor = prep.StandardScaler().fit(X_train)
    X_train = preprocessor.transform(X_train)
    X_tess = preprocessor.transform(X_test)
    return X_train,X_test
    
    #取到一块大小为batch_size大小的数据
def get_random_block_from_data(data,batch_size):
    start_index = np.random.randint(0,len(data)-batch_size)
    return data[start_index:(start_index+batch_size)]
    
   #对训练集和测试集进行标准化变换
X_train,X_test = standard_scale(mnist.train.images,mnist.test.images)

#接下来定义常用参数，总训练样本数，最大训练的轮数（epoch）设为20，batch_size设为128，并设置每隔一轮（epoch）就显示一次损失cost
#总训练样本数
n_samples = int(mnist.train.num_examples)
training_epochs = 20
batch_size = 128
display_step = 1

#定义一个AGN自编码器的实例，定义模型输入节点数n_input为784，自编码器的隐含层节点数n_hidden为200，遗憾层的激活函数transfer_funcction为softplus
#优化器optimizer为Adam且学习速率为0.001，同时将噪声的系数scale设为0.01
autoencoder = AdditiveGaussianNoiseAutoencoder(n_input=784,
                                               n_hidden=200,
                                               transfer_function = tf.nn.softplus,
                                               optimizer = tf.train.AdamOptimizer(learning_rate=0.001),
                                               scale=0.01)
                                               
 #在每轮（epoch）循环开始时，我们将平均损失avg_cost设为0，并计算总共需要的batch数（通过样本总数除以batch大小）
 #每完成一次epoch训练打印出其对应的损失
for epoch in range(training_epochs):
    avg_cost = 0
    total_batch = int(n_samples/batch_size)
    for i in range(total_batch):
        batch_xs = get_random_block_from_data(X_train,batch_size)
        cost = autoencoder.partial_fit(batch_xs)
        avg_cost= avg_cost+ cost/n_samples*batch_size
        
    if epoch%display_step == 0:
        print("Epoch:",'%04d'%(epoch+1),"cost=","{:.9f}".format(avg_cost))
  
  
 #打印模型的总损失      
 print("Total cost:"+str(autoencoder.calc_total_cost(X_test)))
